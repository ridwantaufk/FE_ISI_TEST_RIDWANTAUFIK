generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password      String
  role          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  chatsReceived Chat[]   @relation("ReceiverRelation")
  chatsSent     Chat[]   @relation("SenderRelation")
  leadTasks     Task[]   @relation("LeadRelation")
  teamTasks     Task[]   @relation("TeamRelation")
}

model Task {
  id          String     @id @default(uuid())
  title       String
  status      TaskStatus
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  leadId      String
  teamId      String
  taskCode    String
  lead        User       @relation("LeadRelation", fields: [leadId], references: [id])
  team        User       @relation("TeamRelation", fields: [teamId], references: [id])
  logs        TaskLog[]

  @@index([leadId])
  @@index([teamId])
}

model TaskLog {
  id          String   @id @default(uuid())
  taskId      String
  action      String
  description String?
  timestamp   DateTime @default(now())
  message     String   @default("")
  task        Task     @relation(fields: [taskId], references: [id])
}

model Chat {
  id         Int      @id @default(autoincrement())
  text       String?
  createdAt  DateTime @default(now())
  receiverId String
  senderId   String
  receiver   User     @relation("ReceiverRelation", fields: [receiverId], references: [id])
  sender     User     @relation("SenderRelation", fields: [senderId], references: [id])
}

enum TaskStatus {
  NOT_STARTED
  ON_PROGRESS
  DONE
  REJECT
}
